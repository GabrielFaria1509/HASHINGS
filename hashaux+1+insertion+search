#include <iostream>

using namespace std;

struct dado
{
    int k;
    int status;
};

int hash_aux(int k, int m)
{ // função //k é o valor que vai entrar no vetor //m é o tamanho do vetor
    int h = k % m;
    if (h < 0)
        h += m;

    return h;
}
int hash1(int k, int i, int m)
{
    int h = (hash_aux(k, m) + i) % m;

    return h;
}
int hash_insert(dado t[], int m, int k)
{
    int j;
    int i = 0;

    do
    {
        j = hash1(k, i, m);
        if (t[j].status != 1)
        {
            t[j].k = k;
            t[j].status = 1;

            return j;
        }
        else
        {
            i = i + 1;
        }
    } while (i != m);

    return -1;
}
int hash_search(dado t[], int m, int k)
{
    int i = 0;
    int j;
    do
    {
        j = hash1(k, i, m);
        if (t[j].k == k)
        {
            return j;
        }
        i = i + 1;

    } while (t[j].status != 0 && i < m);

    return -1;
}
int main()
{

    int i;
    int k;
    int m;
    int aux;
    int posicao;

    cin >> m; // tamanho da tabela

    dado t[m];

    for (i = 0; i < m; i++)
    {
        t[i].k = -1;
        t[i].status = -1;
    }

    cin >> k; // chaves a serem inseridas
    while (k != 0)
    {
        hash_insert(t, m, k);
        cin >> k;
    }

    cin >> aux;
    k = aux;

    for (i = 0; i < m; i++)
    {
        posicao = hash_search(t, m, k);
    }
    if (posicao >= 0)
    {
        cout << "Chave " << k << " encontrada na posicao " << posicao << endl;
    }
    else
    {
        cout << "Chave " << k << " nao encontrada" << endl;
    }

    return 0;
}
