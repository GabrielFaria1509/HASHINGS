#include<iostream>
using namespace std;
struct dado{
    int k;
    int status; //0-vazio, 1-ocupado, 2-removido
};
int hash_aux(int k, int m)
{ // função //k é o valor que vai entrar no vetor //m é o tamanho do vetor
    int h = k % m;
    if (h < 0)
        h += m;

    return h;
}
int hash1(int k, int i, int m)
{
    int h = (hash_aux(k, m) + i) % m;

    return h;
}
int hash_insert(dado t[], int m, int k)
{
    int j;
    int i = 0;

    do
    {
        j = hash1(k, i, m);
        if (t[j].status != 1)
        {
            t[j].k = k;
            t[j].status = 1;

            return j;
        }
        else
        {
            i = i + 1;
        }
    } while (i != m);

    return -1;
}
int hash_search(dado t[], int m, int k)
{
    int i = 0;
    int j;
    do
    {
        j = hash1(k, i, m);
        if (t[j].k == k)
        {
            return j;
        }
        i = i + 1;

    } while (t[j].status != 0 && i < m);

    return -1;
}
int hash_remove(dado t[], int m, int k){
    int j = hash_search(t,m,k);
    if(j!=-1){
        t[j].status = 2;
        t[j].k = -1;

        return 0; //consegui remover
    }
    else{
        return -1; //k não está na tabela
    }
}
int main(){
    int i;
    int k;
    int m;
    dado t[m];
    int removida ;    //chave que vou remover


    cin>>m; //entrada tamanho do vetor

    cin>>k;  //chaves do vetor

    while(k!=0){
         hash_insert(t, m, k);        //insere elentos nas posições
         cin >> k;
    }

    cin>>removida;
    k = removida;

    if(hash_remove(t,m,k)==0){    //conseguiu remover a chave
        for(i=0;i<m-1;i++){
            cout << t[i].k << " ";
        }
    }
    if(hash_remove(t,m,k)==-1){    //chave não está na tabela
        for(i=0;i<m;i++){
            cout << t[i].k << " ";
        }
    }
    


    
    
    
    









}   


    
